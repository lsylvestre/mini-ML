type token =
  | EOF
  | POP
  | PUSH
  | FUNCTION
  | RETURN
  | CALL
  | GOTO
  | IFGOTO
  | LABEL
  | DOT
  | CONSTANT
  | STATIC
  | LOCAL
  | ARGUMENT
  | TEMP
  | THIS
  | THAT
  | ADD
  | SUB
  | LAND
  | LOR
  | NOT
  | LT
  | GT
  | EQ
  | EXIT
  | IDENT of (string)
  | FNAME of (string)
  | MIDENT of (string)
  | INT of (int)

open Parsing;;
let _ = parse_error;;
# 11 "parser.mly"
  open Parseutils
  open Bc
# 39 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* POP *);
  258 (* PUSH *);
  259 (* FUNCTION *);
  260 (* RETURN *);
  261 (* CALL *);
  262 (* GOTO *);
  263 (* IFGOTO *);
  264 (* LABEL *);
  265 (* DOT *);
  266 (* CONSTANT *);
  267 (* STATIC *);
  268 (* LOCAL *);
  269 (* ARGUMENT *);
  270 (* TEMP *);
  271 (* THIS *);
  272 (* THAT *);
  273 (* ADD *);
  274 (* SUB *);
  275 (* LAND *);
  276 (* LOR *);
  277 (* NOT *);
  278 (* LT *);
  279 (* GT *);
  280 (* EQ *);
  281 (* EXIT *);
    0|]

let yytransl_block = [|
  282 (* IDENT *);
  283 (* FNAME *);
  284 (* MIDENT *);
  285 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\005\000\006\000\006\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\001\000\002\000\001\000\002\000\002\000\003\000\001\000\003\000\
\002\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\031\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\005\000\
\021\000\000\000\000\000\022\000\023\000\009\000\010\000\011\000\
\002\000\024\000\025\000\026\000\027\000\030\000\028\000\029\000\
\006\000\008\000"

let yydgoto = "\002\000\
\021\000\022\000\023\000\031\000\034\000\038\000"

let yysindex = "\255\255\
\001\000\000\000\000\000\248\254\248\254\243\254\000\000\243\254\
\239\254\239\254\239\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\237\254\
\242\254\244\254\245\254\246\254\247\254\249\254\000\000\000\000\
\000\000\250\254\251\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\250\255\000\000\000\000\016\000\017\000\002\000"

let yytablesize = 282
let yytable = "\001\000\
\003\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\036\000\042\000\037\000\039\000\040\000\033\000\043\000\041\000\
\044\000\045\000\046\000\047\000\032\000\048\000\049\000\050\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000"

let yycheck = "\001\000\
\000\000\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\026\001\029\001\028\001\010\000\011\000\027\001\029\001\022\000\
\029\001\029\001\029\001\029\001\005\000\029\001\029\001\029\001\
\008\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001"

let yynames_const = "\
  EOF\000\
  POP\000\
  PUSH\000\
  FUNCTION\000\
  RETURN\000\
  CALL\000\
  GOTO\000\
  IFGOTO\000\
  LABEL\000\
  DOT\000\
  CONSTANT\000\
  STATIC\000\
  LOCAL\000\
  ARGUMENT\000\
  TEMP\000\
  THIS\000\
  THAT\000\
  ADD\000\
  SUB\000\
  LAND\000\
  LOR\000\
  NOT\000\
  LT\000\
  GT\000\
  EQ\000\
  EXIT\000\
  "

let yynames_block = "\
  IDENT\000\
  FNAME\000\
  MIDENT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
              ( [] )
# 240 "parser.ml"
               : Bc.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inst) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Bc.prog) in
    Obj.repr(
# 29 "parser.mly"
              ( _1::_2 )
# 248 "parser.ml"
               : Bc.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prim) in
    Obj.repr(
# 33 "parser.mly"
                         ( Op(_1) )
# 255 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'segment) in
    Obj.repr(
# 34 "parser.mly"
                         ( Pop(_2) )
# 262 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'segment) in
    Obj.repr(
# 35 "parser.mly"
                         ( Push(_2) )
# 269 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fun_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 36 "parser.mly"
                         ( Function(_2,_3) )
# 277 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                         ( Return )
# 283 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fun_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 38 "parser.mly"
                         ( Call(_2,_3) )
# 291 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 39 "parser.mly"
                         ( Goto(_2) )
# 298 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 40 "parser.mly"
                         ( IfGoto(_2)  )
# 305 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 41 "parser.mly"
                         ( Label(_2) )
# 312 "parser.ml"
               : 'inst))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
          ( Add )
# 318 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
          ( Sub )
# 324 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
          ( Land )
# 330 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
          ( Lor )
# 336 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
          ( Not )
# 342 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
          ( Lt )
# 348 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
          ( Gt )
# 354 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
          ( Eq )
# 360 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
          ( Exit )
# 366 "parser.ml"
               : 'prim))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
        ( match String.split_on_char '.' _1 with 
           | [x;y] -> (x,y) )
# 374 "parser.ml"
               : 'fun_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
            ( _1 )
# 381 "parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
             ( _1 )
# 388 "parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 66 "parser.mly"
                             ( Constant(_2) )
# 395 "parser.ml"
               : 'segment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 67 "parser.mly"
                            ( Static(_2) )
# 402 "parser.ml"
               : 'segment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 68 "parser.mly"
                            ( Local(_2) )
# 409 "parser.ml"
               : 'segment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "parser.mly"
                            ( Argument(_2) )
# 416 "parser.ml"
               : 'segment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 70 "parser.mly"
                            ( This(_2) )
# 423 "parser.ml"
               : 'segment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 71 "parser.mly"
                            ( That(_2) )
# 430 "parser.ml"
               : 'segment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 72 "parser.mly"
                            ( Temp(_2) )
# 437 "parser.ml"
               : 'segment))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Bc.prog)
