type token =
  | LET
  | LETREC
  | IFZ
  | IN
  | IF
  | THEN
  | ELSE
  | INT of (int)
  | FUN
  | DOT
  | ADD
  | SUB
  | EQ
  | END
  | LPAREN
  | RPAREN
  | EOF
  | IDENT of (string)

open Parsing;;
let _ = parse_error;;
# 11 "parser.mly"
  open Parseutils
  open Ast
# 27 "parser.ml"
let yytransl_const = [|
  257 (* LET *);
  258 (* LETREC *);
  259 (* IFZ *);
  260 (* IN *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  265 (* FUN *);
  266 (* DOT *);
  267 (* ADD *);
  268 (* SUB *);
  269 (* EQ *);
  270 (* END *);
  271 (* LPAREN *);
  272 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  264 (* INT *);
  273 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\003\000\001\000\001\000\002\000\006\000\
\006\000\004\000\003\000\001\000\001\000\006\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\012\000\000\000\
\000\000\013\000\016\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\002\000\007\000\
\000\000\000\000\000\000\000\000\011\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\011\000\012\000\013\000\014\000"

let yysindex = "\005\000\
\027\255\000\000\000\000\249\254\255\254\027\255\000\000\021\255\
\027\255\000\000\000\000\003\000\027\255\000\000\007\255\018\255\
\003\255\039\255\029\255\000\000\027\255\027\255\000\000\000\000\
\027\255\027\255\027\255\027\255\000\000\001\255\000\000\252\254\
\000\255\036\255\014\255\027\255\027\255\027\255\014\255\014\255\
\014\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\037\000\055\000\
\073\000"

let yygindex = "\000\000\
\000\000\252\255\000\000\026\000"

let yytablesize = 359
let yytable = "\036\000\
\003\000\017\000\023\000\037\000\019\000\001\000\021\000\022\000\
\027\000\015\000\021\000\022\000\022\000\021\000\022\000\016\000\
\030\000\031\000\010\000\025\000\032\000\033\000\034\000\035\000\
\021\000\022\000\003\000\004\000\005\000\006\000\026\000\039\000\
\040\000\041\000\007\000\008\000\008\000\018\000\024\000\021\000\
\022\000\009\000\038\000\010\000\029\000\000\000\021\000\022\000\
\028\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\003\000\003\000\003\000\003\000\000\000\003\000\003\000\
\003\000\003\000\003\000\003\000\020\000\021\000\022\000\003\000\
\003\000\003\000\010\000\010\000\010\000\010\000\010\000\000\000\
\010\000\010\000\010\000\010\000\010\000\000\000\000\000\000\000\
\000\000\010\000\010\000\010\000\008\000\008\000\008\000\008\000\
\008\000\000\000\008\000\008\000\008\000\008\000\008\000\000\000\
\000\000\000\000\000\000\008\000\008\000\008\000\009\000\009\000\
\009\000\009\000\009\000\000\000\009\000\009\000\009\000\009\000\
\009\000\000\000\000\000\000\000\000\000\009\000\009\000\009\000\
\014\000\014\000\014\000\014\000\014\000\000\000\014\000\014\000\
\014\000\014\000\014\000\000\000\000\000\000\000\000\000\014\000\
\014\000\014\000\005\000\000\000\005\000\005\000\000\000\000\000\
\005\000\005\000\005\000\000\000\000\000\000\000\005\000"

let yycheck = "\004\001\
\000\000\006\000\000\000\004\001\009\000\001\000\011\001\012\001\
\006\001\017\001\011\001\012\001\012\001\011\001\012\001\017\001\
\021\000\022\000\000\000\013\001\025\000\026\000\027\000\028\000\
\011\001\012\001\000\001\001\001\002\001\003\001\013\001\036\000\
\037\000\038\000\008\001\009\001\000\000\017\001\013\000\011\001\
\012\001\015\001\007\001\017\001\016\001\255\255\011\001\012\001\
\010\001\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\010\001\011\001\012\001\015\001\
\016\001\017\001\000\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\000\001\001\001\002\001\003\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\000\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\000\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\004\001\255\255\006\001\007\001\255\255\255\255\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001"

let yynames_const = "\
  LET\000\
  LETREC\000\
  IFZ\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  DOT\000\
  ADD\000\
  SUB\000\
  EQ\000\
  END\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 33 "parser.mly"
        ( _1 )
# 216 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 34 "parser.mly"
        ( failwith "Manque un point Ã  la fin de la phrase" )
# 223 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 38 "parser.mly"
                   ( Add(_1,_3) )
# 231 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 39 "parser.mly"
                   ( Sub(_1,_3) )
# 239 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app) in
    Obj.repr(
# 40 "parser.mly"
                   ( _1 )
# 246 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 44 "parser.mly"
             ( _1 )
# 253 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 45 "parser.mly"
             ( App(_1,_2) )
# 261 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 48 "parser.mly"
                            ( Let(_2,_4,_6) )
# 270 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 49 "parser.mly"
                            ( Letrec(_2,_4,_6) )
# 279 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 50 "parser.mly"
                            ( Lam(_2,_4) )
# 287 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 51 "parser.mly"
                            ( _2 )
# 294 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 52 "parser.mly"
                            ( Int(_1))
# 301 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                            ( Var(_1) )
# 308 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 54 "parser.mly"
                            ( IfZero(_2,_4,_6) )
# 317 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                            ( failwith "erreur" )
# 323 "parser.ml"
               : 'exp))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
